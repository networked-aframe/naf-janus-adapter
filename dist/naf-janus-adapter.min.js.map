{"version":3,"file":"naf-janus-adapter.min.js","mappings":"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","sources":["webpack://@networked-aframe/naf-janus-adapter/./node_modules/@networked-aframe/minijanus/minijanus.js","webpack://@networked-aframe/naf-janus-adapter/./src/index.js","webpack://@networked-aframe/naf-janus-adapter/./node_modules/sdp/sdp.js","webpack://@networked-aframe/naf-janus-adapter/webpack/bootstrap","webpack://@networked-aframe/naf-janus-adapter/webpack/startup"],"sourcesContent":["/**\n * Represents a handle to a single Janus plugin on a Janus session. Each WebRTC connection to the Janus server will be\n * associated with a single handle. Once attached to the server, this handle will be given a unique ID which should be\n * used to associate it with future signalling messages.\n *\n * See https://janus.conf.meetecho.com/docs/rest.html#handles.\n **/\nfunction JanusPluginHandle(session) {\n  this.session = session;\n  this.id = undefined;\n}\n\n/** Attaches this handle to the Janus server and sets its ID. **/\nJanusPluginHandle.prototype.attach = function(plugin, loop_index) {\n  var payload = { plugin: plugin, loop_index: loop_index, \"force-bundle\": true, \"force-rtcp-mux\": true };\n  return this.session.send(\"attach\", payload).then(resp => {\n    this.id = resp.data.id;\n    return resp;\n  });\n};\n\n/** Detaches this handle. **/\nJanusPluginHandle.prototype.detach = function() {\n  return this.send(\"detach\");\n};\n\n/** Registers a callback to be fired upon the reception of any incoming Janus signals for this plugin handle with the\n * `janus` attribute equal to `ev`.\n **/\nJanusPluginHandle.prototype.on = function(ev, callback) {\n  return this.session.on(ev, signal => {\n    if (signal.sender == this.id) {\n      callback(signal);\n    }\n  });\n};\n\n/**\n * Sends a signal associated with this handle. Signals should be JSON-serializable objects. Returns a promise that will\n * be resolved or rejected when a response to this signal is received, or when no response is received within the\n * session timeout.\n **/\nJanusPluginHandle.prototype.send = function(type, signal) {\n  return this.session.send(type, Object.assign({ handle_id: this.id }, signal));\n};\n\n/** Sends a plugin-specific message associated with this handle. **/\nJanusPluginHandle.prototype.sendMessage = function(body) {\n  return this.send(\"message\", { body: body });\n};\n\n/** Sends a JSEP offer or answer associated with this handle. **/\nJanusPluginHandle.prototype.sendJsep = function(jsep) {\n  return this.send(\"message\", { body: {}, jsep: jsep });\n};\n\n/** Sends an ICE trickle candidate associated with this handle. **/\nJanusPluginHandle.prototype.sendTrickle = function(candidate) {\n  return this.send(\"trickle\", { candidate: candidate });\n};\n\n/**\n * Represents a Janus session -- a Janus context from within which you can open multiple handles and connections. Once\n * created, this session will be given a unique ID which should be used to associate it with future signalling messages.\n *\n * See https://janus.conf.meetecho.com/docs/rest.html#sessions.\n **/\nfunction JanusSession(output, options) {\n  this.output = output;\n  this.id = undefined;\n  this.nextTxId = 0;\n  this.txns = {};\n  this.eventHandlers = {};\n  this.options = Object.assign({\n    verbose: false,\n    timeoutMs: 10000,\n    keepaliveMs: 30000\n  }, options);\n}\n\n/** Creates this session on the Janus server and sets its ID. **/\nJanusSession.prototype.create = function() {\n  return this.send(\"create\").then(resp => {\n    this.id = resp.data.id;\n    return resp;\n  });\n};\n\n/**\n * Destroys this session. Note that upon destruction, Janus will also close the signalling transport (if applicable) and\n * any open WebRTC connections.\n **/\nJanusSession.prototype.destroy = function() {\n  return this.send(\"destroy\").then((resp) => {\n    this.dispose();\n    return resp;\n  });\n};\n\n/**\n * Disposes of this session in a way such that no further incoming signalling messages will be processed.\n * Outstanding transactions will be rejected.\n **/\nJanusSession.prototype.dispose = function() {\n  this._killKeepalive();\n  this.eventHandlers = {};\n  for (var txId in this.txns) {\n    if (this.txns.hasOwnProperty(txId)) {\n      var txn = this.txns[txId];\n      clearTimeout(txn.timeout);\n      txn.reject(new Error(\"Janus session was disposed.\"));\n      delete this.txns[txId];\n    }\n  }\n};\n\n/**\n * Whether this signal represents an error, and the associated promise (if any) should be rejected.\n * Users should override this to handle any custom plugin-specific error conventions.\n **/\nJanusSession.prototype.isError = function(signal) {\n  return signal.janus === \"error\";\n};\n\n/** Registers a callback to be fired upon the reception of any incoming Janus signals for this session with the\n * `janus` attribute equal to `ev`.\n **/\nJanusSession.prototype.on = function(ev, callback) {\n  var handlers = this.eventHandlers[ev];\n  if (handlers == null) {\n    handlers = this.eventHandlers[ev] = [];\n  }\n  handlers.push(callback);\n};\n\n/**\n * Callback for receiving JSON signalling messages pertinent to this session. If the signals are responses to previously\n * sent signals, the promises for the outgoing signals will be resolved or rejected appropriately with this signal as an\n * argument.\n *\n * External callers should call this function every time a new signal arrives on the transport; for example, in a\n * WebSocket's `message` event, or when a new datum shows up in an HTTP long-polling response.\n **/\nJanusSession.prototype.receive = function(signal) {\n  if (this.options.verbose) {\n    this._logIncoming(signal);\n  }\n  if (signal.session_id != this.id) {\n    console.warn(\"Incorrect session ID received in Janus signalling message: was \" + signal.session_id + \", expected \" + this.id + \".\");\n  }\n\n  var responseType = signal.janus;\n  var handlers = this.eventHandlers[responseType];\n  if (handlers != null) {\n    for (var i = 0; i < handlers.length; i++) {\n      handlers[i](signal);\n    }\n  }\n\n  if (signal.transaction != null) {\n    var txn = this.txns[signal.transaction];\n    if (txn == null) {\n      // this is a response to a transaction that wasn't caused via JanusSession.send, or a plugin replied twice to a\n      // single request, or the session was disposed, or something else that isn't under our purview; that's fine\n      return;\n    }\n\n    if (responseType === \"ack\" && txn.type == \"message\") {\n      // this is an ack of an asynchronously-processed plugin request, we should wait to resolve the promise until the\n      // actual response comes in\n      return;\n    }\n\n    clearTimeout(txn.timeout);\n\n    delete this.txns[signal.transaction];\n    (this.isError(signal) ? txn.reject : txn.resolve)(signal);\n  }\n};\n\n/**\n * Sends a signal associated with this session, beginning a new transaction. Returns a promise that will be resolved or\n * rejected when a response is received in the same transaction, or when no response is received within the session\n * timeout.\n **/\nJanusSession.prototype.send = function(type, signal) {\n  signal = Object.assign({ transaction: (this.nextTxId++).toString() }, signal);\n  return new Promise((resolve, reject) => {\n    var timeout = null;\n    if (this.options.timeoutMs) {\n      timeout = setTimeout(() => {\n        delete this.txns[signal.transaction];\n        reject(new Error(\"Signalling transaction with txid \" + signal.transaction + \" timed out.\"));\n      }, this.options.timeoutMs);\n    }\n    this.txns[signal.transaction] = { resolve: resolve, reject: reject, timeout: timeout, type: type };\n    this._transmit(type, signal);\n  });\n};\n\nJanusSession.prototype._transmit = function(type, signal) {\n  signal = Object.assign({ janus: type }, signal);\n\n  if (this.id != null) { // this.id is undefined in the special case when we're sending the session create message\n    signal = Object.assign({ session_id: this.id }, signal);\n  }\n\n  if (this.options.verbose) {\n    this._logOutgoing(signal);\n  }\n\n  this.output(JSON.stringify(signal));\n  this._resetKeepalive();\n};\n\nJanusSession.prototype._logOutgoing = function(signal) {\n  var kind = signal.janus;\n  if (kind === \"message\" && signal.jsep) {\n    kind = signal.jsep.type;\n  }\n  var message = \"> Outgoing Janus \" + (kind || \"signal\") + \" (#\" + signal.transaction + \"): \";\n  console.debug(\"%c\" + message, \"color: #040\", signal);\n};\n\nJanusSession.prototype._logIncoming = function(signal) {\n  var kind = signal.janus;\n  var message = signal.transaction ?\n      \"< Incoming Janus \" + (kind || \"signal\") + \" (#\" + signal.transaction + \"): \" :\n      \"< Incoming Janus \" + (kind || \"signal\") + \": \";\n  console.debug(\"%c\" + message, \"color: #004\", signal);\n};\n\nJanusSession.prototype._sendKeepalive = function() {\n  return this.send(\"keepalive\");\n};\n\nJanusSession.prototype._killKeepalive = function() {\n  clearTimeout(this.keepaliveTimeout);\n};\n\nJanusSession.prototype._resetKeepalive = function() {\n  this._killKeepalive();\n  if (this.options.keepaliveMs) {\n    this.keepaliveTimeout = setTimeout(() => {\n      this._sendKeepalive().catch(e => console.error(\"Error received from keepalive: \", e));\n    }, this.options.keepaliveMs);\n  }\n};\n\nmodule.exports = {\n  JanusPluginHandle,\n  JanusSession\n};\n","/* global NAF */\nvar mj = require(\"@networked-aframe/minijanus\");\nmj.JanusSession.prototype.sendOriginal = mj.JanusSession.prototype.send;\nmj.JanusSession.prototype.send = function(type, signal) {\n  return this.sendOriginal(type, signal).catch((e) => {\n    if (e.message && e.message.indexOf(\"timed out\") > -1) {\n      console.error(\"web socket timed out\");\n      NAF.connection.adapter.reconnect();\n    } else {\n      throw(e);\n    }\n  });\n}\n\nvar sdpUtils = require(\"sdp\");\n//var debug = require(\"debug\")(\"naf-janus-adapter:debug\");\n//var warn = require(\"debug\")(\"naf-janus-adapter:warn\");\n//var error = require(\"debug\")(\"naf-janus-adapter:error\");\nvar debug = console.log;\nvar warn = console.warn;\nvar error = console.error;\nvar isSafari = /^((?!chrome|android).)*safari/i.test(navigator.userAgent);\n\nconst SUBSCRIBE_TIMEOUT_MS = 15000;\n\nfunction debounce(fn) {\n  var curr = Promise.resolve();\n  return function() {\n    var args = Array.prototype.slice.call(arguments);\n    curr = curr.then(_ => fn.apply(this, args));\n  };\n}\n\nfunction randomUint() {\n  return Math.floor(Math.random() * Number.MAX_SAFE_INTEGER);\n}\n\nfunction untilDataChannelOpen(dataChannel) {\n  return new Promise((resolve, reject) => {\n    if (dataChannel.readyState === \"open\") {\n      resolve();\n    } else {\n      let resolver, rejector;\n\n      const clear = () => {\n        dataChannel.removeEventListener(\"open\", resolver);\n        dataChannel.removeEventListener(\"error\", rejector);\n      };\n\n      resolver = () => {\n        clear();\n        resolve();\n      };\n      rejector = () => {\n        clear();\n        reject();\n      };\n\n      dataChannel.addEventListener(\"open\", resolver);\n      dataChannel.addEventListener(\"error\", rejector);\n    }\n  });\n}\n\nconst isH264VideoSupported = (() => {\n  const video = document.createElement(\"video\");\n  return video.canPlayType('video/mp4; codecs=\"avc1.42E01E, mp4a.40.2\"') !== \"\";\n})();\n\nconst OPUS_PARAMETERS = {\n  // indicates that we want to enable DTX to elide silence packets\n  usedtx: 1,\n  // indicates that we prefer to receive mono audio (important for voip profile)\n  stereo: 0,\n  // indicates that we prefer to send mono audio (important for voip profile)\n  \"sprop-stereo\": 0\n};\n\nconst DEFAULT_PEER_CONNECTION_CONFIG = {\n  iceServers: [{ urls: \"stun:stun1.l.google.com:19302\" }, { urls: \"stun:stun2.l.google.com:19302\" }]\n};\n\nconst WS_NORMAL_CLOSURE = 1000;\n\nclass JanusAdapter {\n  constructor() {\n    this.room = null;\n    // We expect the consumer to set a client id before connecting.\n    this.clientId = null;\n    this.joinToken = null;\n\n    this.serverUrl = null;\n    this.webRtcOptions = {};\n    this.peerConnectionConfig = null;\n    this.ws = null;\n    this.session = null;\n    this.reliableTransport = \"datachannel\";\n    this.unreliableTransport = \"datachannel\";\n\n    // In the event the server restarts and all clients lose connection, reconnect with\n    // some random jitter added to prevent simultaneous reconnection requests.\n    this.initialReconnectionDelay = 1000 * Math.random();\n    this.reconnectionDelay = this.initialReconnectionDelay;\n    this.reconnectionTimeout = null;\n    this.maxReconnectionAttempts = 10;\n    this.reconnectionAttempts = 0;\n\n    this.publisher = null;\n    this.occupants = {};\n    this.leftOccupants = new Set();\n    this.mediaStreams = {};\n    this.localMediaStream = null;\n    this.pendingMediaRequests = new Map();\n\n    this.blockedClients = new Map();\n    this.frozenUpdates = new Map();\n\n    this.timeOffsets = [];\n    this.serverTimeRequests = 0;\n    this.avgTimeOffset = 0;\n\n    this.onWebsocketOpen = this.onWebsocketOpen.bind(this);\n    this.onWebsocketClose = this.onWebsocketClose.bind(this);\n    this.onWebsocketMessage = this.onWebsocketMessage.bind(this);\n    this.onDataChannelMessage = this.onDataChannelMessage.bind(this);\n    this.onData = this.onData.bind(this);\n  }\n\n  setServerUrl(url) {\n    this.serverUrl = url;\n  }\n\n  setApp(app) {}\n\n  setRoom(roomName) {\n    this.room = roomName;\n  }\n\n  setJoinToken(joinToken) {\n    this.joinToken = joinToken;\n  }\n\n  setClientId(clientId) {\n    this.clientId = clientId;\n  }\n\n  setWebRtcOptions(options) {\n    this.webRtcOptions = options;\n  }\n\n  setPeerConnectionConfig(peerConnectionConfig) {\n    this.peerConnectionConfig = peerConnectionConfig;\n  }\n\n  setServerConnectListeners(successListener, failureListener) {\n    this.connectSuccess = successListener;\n    this.connectFailure = failureListener;\n  }\n\n  setRoomOccupantListener(occupantListener) {\n    this.onOccupantsChanged = occupantListener;\n  }\n\n  setDataChannelListeners(openListener, closedListener, messageListener) {\n    this.onOccupantConnected = openListener;\n    this.onOccupantDisconnected = closedListener;\n    this.onOccupantMessage = messageListener;\n  }\n\n  setReconnectionListeners(reconnectingListener, reconnectedListener, reconnectionErrorListener) {\n    // onReconnecting is called with the number of milliseconds until the next reconnection attempt\n    this.onReconnecting = reconnectingListener;\n    // onReconnected is called when the connection has been reestablished\n    this.onReconnected = reconnectedListener;\n    // onReconnectionError is called with an error when maxReconnectionAttempts has been reached\n    this.onReconnectionError = reconnectionErrorListener;\n  }\n\n  setEventLoops(loops) {\n    this.loops = loops;\n  }\n\n  connect() {\n    debug(`connecting to ${this.serverUrl}`);\n\n    const websocketConnection = new Promise((resolve, reject) => {\n      this.ws = new WebSocket(this.serverUrl, \"janus-protocol\");\n\n      this.session = new mj.JanusSession(this.ws.send.bind(this.ws), { timeoutMs: 40000 });\n\n      this.ws.addEventListener(\"close\", this.onWebsocketClose);\n      this.ws.addEventListener(\"message\", this.onWebsocketMessage);\n\n      this.wsOnOpen = () => {\n        this.ws.removeEventListener(\"open\", this.wsOnOpen);\n        this.onWebsocketOpen()\n          .then(resolve)\n          .catch(reject);\n      };\n\n      this.ws.addEventListener(\"open\", this.wsOnOpen);\n    });\n\n    return Promise.all([websocketConnection, this.updateTimeOffset()]);\n  }\n\n  disconnect() {\n    debug(`disconnecting`);\n\n    clearTimeout(this.reconnectionTimeout);\n\n    this.removeAllOccupants();\n    this.leftOccupants = new Set();\n\n    if (this.publisher) {\n      // Close the publisher peer connection. Which also detaches the plugin handle.\n      this.publisher.conn.close();\n      this.publisher = null;\n    }\n\n    if (this.session) {\n      this.session.dispose();\n      this.session = null;\n    }\n\n    if (this.ws) {\n      this.ws.removeEventListener(\"open\", this.wsOnOpen);\n      this.ws.removeEventListener(\"close\", this.onWebsocketClose);\n      this.ws.removeEventListener(\"message\", this.onWebsocketMessage);\n      this.ws.close();\n      this.ws = null;\n    }\n\n    // Now that all RTCPeerConnection closed, be sure to not call\n    // reconnect() again via performDelayedReconnect if previous\n    // RTCPeerConnection was in the failed state.\n    if (this.delayedReconnectTimeout) {\n      clearTimeout(this.delayedReconnectTimeout);\n      this.delayedReconnectTimeout = null;\n    }\n  }\n\n  isDisconnected() {\n    return this.ws === null;\n  }\n\n  async onWebsocketOpen() {\n    // Create the Janus Session\n    await this.session.create();\n\n    // Attach the SFU Plugin and create a RTCPeerConnection for the publisher.\n    // The publisher sends audio and opens two bidirectional data channels.\n    // One reliable datachannel and one unreliable.\n    this.publisher = await this.createPublisher();\n\n    // Call the naf connectSuccess callback before we start receiving WebRTC messages.\n    this.connectSuccess(this.clientId);\n\n    const addOccupantPromises = [];\n\n    for (let i = 0; i < this.publisher.initialOccupants.length; i++) {\n      const occupantId = this.publisher.initialOccupants[i];\n      if (occupantId === this.clientId) continue; // Happens during non-graceful reconnects due to zombie sessions\n      addOccupantPromises.push(this.addOccupant(occupantId));\n    }\n\n    await Promise.all(addOccupantPromises);\n  }\n\n  onWebsocketClose(event) {\n    // The connection was closed successfully. Don't try to reconnect.\n    if (event.code === WS_NORMAL_CLOSURE) {\n      return;\n    }\n\n    console.warn(\"Janus websocket closed unexpectedly.\");\n    if (this.onReconnecting) {\n      this.onReconnecting(this.reconnectionDelay);\n    }\n\n    this.reconnectionTimeout = setTimeout(() => this.reconnect(), this.reconnectionDelay);\n  }\n\n  reconnect() {\n    // Dispose of all networked entities and other resources tied to the session.\n    this.disconnect();\n\n    this.connect()\n      .then(() => {\n        this.reconnectionDelay = this.initialReconnectionDelay;\n        this.reconnectionAttempts = 0;\n\n        if (this.onReconnected) {\n          this.onReconnected();\n        }\n      })\n      .catch(error => {\n        this.reconnectionDelay += 1000;\n        this.reconnectionAttempts++;\n\n        if (this.reconnectionAttempts > this.maxReconnectionAttempts && this.onReconnectionError) {\n          return this.onReconnectionError(\n            new Error(\"Connection could not be reestablished, exceeded maximum number of reconnection attempts.\")\n          );\n        }\n\n        console.warn(\"Error during reconnect, retrying.\");\n        console.warn(error);\n\n        if (this.onReconnecting) {\n          this.onReconnecting(this.reconnectionDelay);\n        }\n\n        this.reconnectionTimeout = setTimeout(() => this.reconnect(), this.reconnectionDelay);\n      });\n  }\n\n  performDelayedReconnect() {\n    if (this.delayedReconnectTimeout) {\n      clearTimeout(this.delayedReconnectTimeout);\n    }\n\n    this.delayedReconnectTimeout = setTimeout(() => {\n      this.delayedReconnectTimeout = null;\n      this.reconnect();\n    }, 10000);\n  }\n\n  onWebsocketMessage(event) {\n    this.session.receive(JSON.parse(event.data));\n  }\n\n  async addOccupant(occupantId) {\n    if (this.occupants[occupantId]) {\n      this.removeOccupant(occupantId);\n    }\n\n    this.leftOccupants.delete(occupantId);\n\n    var subscriber = await this.createSubscriber(occupantId);\n\n    if (!subscriber) return;\n\n    this.occupants[occupantId] = subscriber;\n\n    this.setMediaStream(occupantId, subscriber.mediaStream);\n\n    // Call the Networked AFrame callbacks for the new occupant.\n    this.onOccupantConnected(occupantId);\n    this.onOccupantsChanged(this.occupants);\n\n    return subscriber;\n  }\n\n  removeAllOccupants() {\n    for (const occupantId of Object.getOwnPropertyNames(this.occupants)) {\n      this.removeOccupant(occupantId);\n    }\n  }\n\n  removeOccupant(occupantId) {\n    this.leftOccupants.add(occupantId);\n\n    if (this.occupants[occupantId]) {\n      // Close the subscriber peer connection. Which also detaches the plugin handle.\n      this.occupants[occupantId].conn.close();\n      delete this.occupants[occupantId];\n    }\n\n    if (this.mediaStreams[occupantId]) {\n      delete this.mediaStreams[occupantId];\n    }\n\n    if (this.pendingMediaRequests.has(occupantId)) {\n      const msg = \"The user disconnected before the media stream was resolved.\";\n      this.pendingMediaRequests.get(occupantId).audio.reject(msg);\n      this.pendingMediaRequests.get(occupantId).video.reject(msg);\n      this.pendingMediaRequests.delete(occupantId);\n    }\n\n    // Call the Networked AFrame callbacks for the removed occupant.\n    this.onOccupantDisconnected(occupantId);\n    this.onOccupantsChanged(this.occupants);\n  }\n\n  associate(conn, handle) {\n    conn.addEventListener(\"icecandidate\", ev => {\n      handle.sendTrickle(ev.candidate || null).catch(e => error(\"Error trickling ICE: %o\", e));\n    });\n    conn.addEventListener(\"iceconnectionstatechange\", ev => {\n      if (conn.iceConnectionState === \"connected\") {\n        console.log(\"ICE state changed to connected\");\n      }\n      if (conn.iceConnectionState === \"disconnected\") {\n        console.warn(\"ICE state changed to disconnected\");\n      }\n      if (conn.iceConnectionState === \"failed\") {\n        console.warn(\"ICE failure detected. Reconnecting in 10s.\");\n        this.performDelayedReconnect();\n      }\n    })\n\n    // we have to debounce these because janus gets angry if you send it a new SDP before\n    // it's finished processing an existing SDP. in actuality, it seems like this is maybe\n    // too liberal and we need to wait some amount of time after an offer before sending another,\n    // but we don't currently know any good way of detecting exactly how long :(\n    conn.addEventListener(\n      \"negotiationneeded\",\n      debounce(ev => {\n        debug(\"Sending new offer for handle: %o\", handle);\n        var offer = conn.createOffer().then(this.configurePublisherSdp).then(this.fixSafariIceUFrag);\n        var local = offer.then(o => conn.setLocalDescription(o));\n        var remote = offer;\n\n        remote = remote\n          .then(this.fixSafariIceUFrag)\n          .then(j => handle.sendJsep(j))\n          .then(r => conn.setRemoteDescription(r.jsep));\n        return Promise.all([local, remote]).catch(e => error(\"Error negotiating offer: %o\", e));\n      })\n    );\n    handle.on(\n      \"event\",\n      debounce(ev => {\n        var jsep = ev.jsep;\n        if (jsep && jsep.type == \"offer\") {\n          debug(\"Accepting new offer for handle: %o\", handle);\n          var answer = conn\n            .setRemoteDescription(this.configureSubscriberSdp(jsep))\n            .then(_ => conn.createAnswer())\n            .then(this.fixSafariIceUFrag);\n          var local = answer.then(a => conn.setLocalDescription(a));\n          var remote = answer.then(j => handle.sendJsep(j));\n          return Promise.all([local, remote]).catch(e => error(\"Error negotiating answer: %o\", e));\n        } else {\n          // some other kind of event, nothing to do\n          return null;\n        }\n      })\n    );\n  }\n\n  async createPublisher() {\n    var handle = new mj.JanusPluginHandle(this.session);\n    var conn = new RTCPeerConnection(this.peerConnectionConfig || DEFAULT_PEER_CONNECTION_CONFIG);\n\n    debug(\"pub waiting for sfu\");\n    await handle.attach(\"janus.plugin.sfu\", this.loops && this.clientId ? parseInt(this.clientId) % this.loops : undefined);\n\n    this.associate(conn, handle);\n\n    debug(\"pub waiting for data channels & webrtcup\");\n    var webrtcup = new Promise(resolve => handle.on(\"webrtcup\", resolve));\n\n    // Unreliable datachannel: sending and receiving component updates.\n    // Reliable datachannel: sending and recieving entity instantiations.\n    var reliableChannel = conn.createDataChannel(\"reliable\", { ordered: true });\n    var unreliableChannel = conn.createDataChannel(\"unreliable\", {\n      ordered: false,\n      maxRetransmits: 0\n    });\n\n    reliableChannel.addEventListener(\"message\", e => this.onDataChannelMessage(e, \"janus-reliable\"));\n    unreliableChannel.addEventListener(\"message\", e => this.onDataChannelMessage(e, \"janus-unreliable\"));\n\n    await webrtcup;\n    await untilDataChannelOpen(reliableChannel);\n    await untilDataChannelOpen(unreliableChannel);\n\n    // doing this here is sort of a hack around chrome renegotiation weirdness --\n    // if we do it prior to webrtcup, chrome on gear VR will sometimes put a\n    // renegotiation offer in flight while the first offer was still being\n    // processed by janus. we should find some more principled way to figure out\n    // when janus is done in the future.\n    if (this.localMediaStream) {\n      this.localMediaStream.getTracks().forEach(track => {\n        conn.addTrack(track, this.localMediaStream);\n      });\n    }\n\n    // Handle all of the join and leave events.\n    handle.on(\"event\", ev => {\n      var data = ev.plugindata.data;\n      if (data.event == \"join\" && data.room_id == this.room) {\n        if (this.delayedReconnectTimeout) {\n          // Don't create a new RTCPeerConnection, all RTCPeerConnection will be closed in less than 10s.\n          return;\n        }\n        this.addOccupant(data.user_id);\n      } else if (data.event == \"leave\" && data.room_id == this.room) {\n        this.removeOccupant(data.user_id);\n      } else if (data.event == \"blocked\") {\n        document.body.dispatchEvent(new CustomEvent(\"blocked\", { detail: { clientId: data.by } }));\n      } else if (data.event == \"unblocked\") {\n        document.body.dispatchEvent(new CustomEvent(\"unblocked\", { detail: { clientId: data.by } }));\n      } else if (data.event === \"data\") {\n        this.onData(JSON.parse(data.body), \"janus-event\");\n      }\n    });\n\n    debug(\"pub waiting for join\");\n\n    // Send join message to janus. Listen for join/leave messages. Automatically subscribe to all users' WebRTC data.\n    var message = await this.sendJoin(handle, {\n      notifications: true,\n      data: true\n    });\n\n    if (!message.plugindata.data.success) {\n      const err = message.plugindata.data.error;\n      console.error(err);\n      // We may get here because of an expired JWT.\n      // Close the connection ourself otherwise janus will close it after\n      // session_timeout because we didn't send any keepalive and this will\n      // trigger a delayed reconnect because of the iceconnectionstatechange\n      // listener for failure state.\n      // Even if the app code calls disconnect in case of error, disconnect\n      // won't close the peer connection because this.publisher is not set.\n      conn.close();\n      throw err;\n    }\n\n    var initialOccupants = message.plugindata.data.response.users[this.room] || [];\n\n    if (initialOccupants.includes(this.clientId)) {\n      console.warn(\"Janus still has previous session for this client. Reconnecting in 10s.\");\n      this.performDelayedReconnect();\n    }\n\n    debug(\"publisher ready\");\n    return {\n      handle,\n      initialOccupants,\n      reliableChannel,\n      unreliableChannel,\n      conn\n    };\n  }\n\n  configurePublisherSdp(jsep) {\n    jsep.sdp = jsep.sdp.replace(/a=fmtp:(109|111).*\\r\\n/g, (line, pt) => {\n      const parameters = Object.assign(sdpUtils.parseFmtp(line), OPUS_PARAMETERS);\n      return sdpUtils.writeFmtp({ payloadType: pt, parameters: parameters });\n    });\n    return jsep;\n  }\n\n  configureSubscriberSdp(jsep) {\n    // todo: consider cleaning up these hacks to use sdputils\n    if (!isH264VideoSupported) {\n      if (navigator.userAgent.indexOf(\"HeadlessChrome\") !== -1) {\n        // HeadlessChrome (e.g. puppeteer) doesn't support webrtc video streams, so we remove those lines from the SDP.\n        jsep.sdp = jsep.sdp.replace(/m=video[^]*m=/, \"m=\");\n      }\n    }\n\n    // TODO: Hack to get video working on Chrome for Android. https://groups.google.com/forum/#!topic/mozilla.dev.media/Ye29vuMTpo8\n    if (navigator.userAgent.indexOf(\"Android\") === -1) {\n      jsep.sdp = jsep.sdp.replace(\n        \"a=rtcp-fb:107 goog-remb\\r\\n\",\n        \"a=rtcp-fb:107 goog-remb\\r\\na=rtcp-fb:107 transport-cc\\r\\na=fmtp:107 level-asymmetry-allowed=1;packetization-mode=1;profile-level-id=42e01f\\r\\n\"\n      );\n    } else {\n      jsep.sdp = jsep.sdp.replace(\n        \"a=rtcp-fb:107 goog-remb\\r\\n\",\n        \"a=rtcp-fb:107 goog-remb\\r\\na=rtcp-fb:107 transport-cc\\r\\na=fmtp:107 level-asymmetry-allowed=1;packetization-mode=1;profile-level-id=42001f\\r\\n\"\n      );\n    }\n    return jsep;\n  }\n\n  async fixSafariIceUFrag(jsep) {\n    // Safari produces a \\n instead of an \\r\\n for the ice-ufrag. See https://github.com/meetecho/janus-gateway/issues/1818\n    jsep.sdp = jsep.sdp.replace(/[^\\r]\\na=ice-ufrag/g, \"\\r\\na=ice-ufrag\");\n    return jsep\n  }\n\n  async createSubscriber(occupantId, maxRetries = 5) {\n    if (this.leftOccupants.has(occupantId)) {\n      console.warn(occupantId + \": cancelled occupant connection, occupant left before subscription negotation.\");\n      return null;\n    }\n\n    var handle = new mj.JanusPluginHandle(this.session);\n    var conn = new RTCPeerConnection(this.peerConnectionConfig || DEFAULT_PEER_CONNECTION_CONFIG);\n\n    debug(occupantId + \": sub waiting for sfu\");\n    await handle.attach(\"janus.plugin.sfu\", this.loops ? parseInt(occupantId) % this.loops : undefined);\n\n    this.associate(conn, handle);\n\n    debug(occupantId + \": sub waiting for join\");\n\n    if (this.leftOccupants.has(occupantId)) {\n      conn.close();\n      console.warn(occupantId + \": cancelled occupant connection, occupant left after attach\");\n      return null;\n    }\n\n    let webrtcFailed = false;\n\n    const webrtcup = new Promise(resolve => {\n      const leftInterval = setInterval(() => {\n        if (this.leftOccupants.has(occupantId)) {\n          clearInterval(leftInterval);\n          resolve();\n        }\n      }, 1000);\n\n      const timeout = setTimeout(() => {\n        clearInterval(leftInterval);\n        webrtcFailed = true;\n        resolve();\n      }, SUBSCRIBE_TIMEOUT_MS);\n\n      handle.on(\"webrtcup\", () => {\n        clearTimeout(timeout);\n        clearInterval(leftInterval);\n        resolve();\n      });\n    });\n\n    // Send join message to janus. Don't listen for join/leave messages. Subscribe to the occupant's media.\n    // Janus should send us an offer for this occupant's media in response to this.\n    await this.sendJoin(handle, { media: occupantId });\n\n    if (this.leftOccupants.has(occupantId)) {\n      conn.close();\n      console.warn(occupantId + \": cancelled occupant connection, occupant left after join\");\n      return null;\n    }\n\n    debug(occupantId + \": sub waiting for webrtcup\");\n    await webrtcup;\n\n    if (this.leftOccupants.has(occupantId)) {\n      conn.close();\n      console.warn(occupantId + \": cancel occupant connection, occupant left during or after webrtcup\");\n      return null;\n    }\n\n    if (webrtcFailed) {\n      conn.close();\n      if (maxRetries > 0) {\n        console.warn(occupantId + \": webrtc up timed out, retrying\");\n        return this.createSubscriber(occupantId, maxRetries - 1);\n      } else {\n        console.warn(occupantId + \": webrtc up timed out\");\n        return null;\n      }\n    }\n\n    if (isSafari && !this._iOSHackDelayedInitialPeer) {\n      // HACK: the first peer on Safari during page load can fail to work if we don't\n      // wait some time before continuing here. See: https://github.com/mozilla/hubs/pull/1692\n      await (new Promise((resolve) => setTimeout(resolve, 3000)));\n      this._iOSHackDelayedInitialPeer = true;\n    }\n\n    var mediaStream = new MediaStream();\n    var receivers = conn.getReceivers();\n    receivers.forEach(receiver => {\n      if (receiver.track) {\n        mediaStream.addTrack(receiver.track);\n      }\n    });\n    if (mediaStream.getTracks().length === 0) {\n      mediaStream = null;\n    }\n\n    debug(occupantId + \": subscriber ready\");\n    return {\n      handle,\n      mediaStream,\n      conn\n    };\n  }\n\n  sendJoin(handle, subscribe) {\n    return handle.sendMessage({\n      kind: \"join\",\n      room_id: this.room,\n      user_id: this.clientId,\n      subscribe,\n      token: this.joinToken\n    });\n  }\n\n  toggleFreeze() {\n    if (this.frozen) {\n      this.unfreeze();\n    } else {\n      this.freeze();\n    }\n  }\n\n  freeze() {\n    this.frozen = true;\n  }\n\n  unfreeze() {\n    this.frozen = false;\n    this.flushPendingUpdates();\n  }\n\n  dataForUpdateMultiMessage(networkId, message) {\n    // \"d\" is an array of entity datas, where each item in the array represents a unique entity and contains\n    // metadata for the entity, and an array of components that have been updated on the entity.\n    // This method finds the data corresponding to the given networkId.\n    for (let i = 0, l = message.data.d.length; i < l; i++) {\n      const data = message.data.d[i];\n\n      if (data.networkId === networkId) {\n        return data;\n      }\n    }\n\n    return null;\n  }\n\n  getPendingData(networkId, message) {\n    if (!message) return null;\n\n    let data = message.dataType === \"um\" ? this.dataForUpdateMultiMessage(networkId, message) : message.data;\n\n    // Ignore messages relating to users who have disconnected since freezing, their entities\n    // will have aleady been removed by NAF.\n    // Note that delete messages have no \"owner\" so we have to check for that as well.\n    if (data.owner && !this.occupants[data.owner]) return null;\n\n    // Ignore messages from users that we may have blocked while frozen.\n    if (data.owner && this.blockedClients.has(data.owner)) return null;\n\n    return data\n  }\n\n  // Used externally\n  getPendingDataForNetworkId(networkId) {\n    return this.getPendingData(networkId, this.frozenUpdates.get(networkId));\n  }\n\n  flushPendingUpdates() {\n    for (const [networkId, message] of this.frozenUpdates) {\n      let data = this.getPendingData(networkId, message);\n      if (!data) continue;\n\n      // Override the data type on \"um\" messages types, since we extract entity updates from \"um\" messages into\n      // individual frozenUpdates in storeSingleMessage.\n      const dataType = message.dataType === \"um\" ? \"u\" : message.dataType;\n\n      this.onOccupantMessage(null, dataType, data, message.source);\n    }\n    this.frozenUpdates.clear();\n  }\n\n  storeMessage(message) {\n    if (message.dataType === \"um\") { // UpdateMulti\n      for (let i = 0, l = message.data.d.length; i < l; i++) {\n        this.storeSingleMessage(message, i);\n      }\n    } else {\n      this.storeSingleMessage(message);\n    }\n  }\n\n  storeSingleMessage(message, index) {\n    const data = index !== undefined ? message.data.d[index] : message.data;\n    const dataType = message.dataType;\n    const source = message.source;\n\n    const networkId = data.networkId;\n\n    if (!this.frozenUpdates.has(networkId)) {\n      this.frozenUpdates.set(networkId, message);\n    } else {\n      const storedMessage = this.frozenUpdates.get(networkId);\n      const storedData = storedMessage.dataType === \"um\" ? this.dataForUpdateMultiMessage(networkId, storedMessage) : storedMessage.data;\n\n      // Avoid updating components if the entity data received did not come from the current owner.\n      const isOutdatedMessage = data.lastOwnerTime < storedData.lastOwnerTime;\n      const isContemporaneousMessage = data.lastOwnerTime === storedData.lastOwnerTime;\n      if (isOutdatedMessage || (isContemporaneousMessage && storedData.owner > data.owner)) {\n        return;\n      }\n\n      if (dataType === \"r\") {\n        const createdWhileFrozen = storedData && storedData.isFirstSync;\n        if (createdWhileFrozen) {\n          // If the entity was created and deleted while frozen, don't bother conveying anything to the consumer.\n          this.frozenUpdates.delete(networkId);\n        } else {\n          // Delete messages override any other messages for this entity\n          this.frozenUpdates.set(networkId, message);\n        }\n      } else {\n        // merge in component updates\n        if (storedData.components && data.components) {\n          Object.assign(storedData.components, data.components);\n        }\n      }\n    }\n  }\n\n  onDataChannelMessage(e, source) {\n    this.onData(JSON.parse(e.data), source);\n  }\n\n  onData(message, source) {\n    if (debug.enabled) {\n      debug(`DC in: ${message}`);\n    }\n\n    if (!message.dataType) return;\n\n    message.source = source;\n\n    if (this.frozen) {\n      this.storeMessage(message);\n    } else {\n      this.onOccupantMessage(null, message.dataType, message.data, message.source);\n    }\n  }\n\n  shouldStartConnectionTo(client) {\n    return true;\n  }\n\n  startStreamConnection(client) {}\n\n  closeStreamConnection(client) {}\n\n  getConnectStatus(clientId) {\n    return this.occupants[clientId] ? NAF.adapters.IS_CONNECTED : NAF.adapters.NOT_CONNECTED;\n  }\n\n  async updateTimeOffset() {\n    if (this.isDisconnected()) return;\n\n    const clientSentTime = Date.now();\n\n    const res = await fetch(document.location.href, {\n      method: \"HEAD\",\n      cache: \"no-cache\"\n    });\n\n    const precision = 1000;\n    const serverReceivedTime = new Date(res.headers.get(\"Date\")).getTime() + precision / 2;\n    const clientReceivedTime = Date.now();\n    const serverTime = serverReceivedTime + (clientReceivedTime - clientSentTime) / 2;\n    const timeOffset = serverTime - clientReceivedTime;\n\n    this.serverTimeRequests++;\n\n    if (this.serverTimeRequests <= 10) {\n      this.timeOffsets.push(timeOffset);\n    } else {\n      this.timeOffsets[this.serverTimeRequests % 10] = timeOffset;\n    }\n\n    this.avgTimeOffset = this.timeOffsets.reduce((acc, offset) => (acc += offset), 0) / this.timeOffsets.length;\n\n    if (this.serverTimeRequests > 10) {\n      debug(`new server time offset: ${this.avgTimeOffset}ms`);\n      setTimeout(() => this.updateTimeOffset(), 5 * 60 * 1000); // Sync clock every 5 minutes.\n    } else {\n      this.updateTimeOffset();\n    }\n  }\n\n  getServerTime() {\n    return Date.now() + this.avgTimeOffset;\n  }\n\n  getMediaStream(clientId, type = \"audio\") {\n    if (this.mediaStreams[clientId]) {\n      debug(`Already had ${type} for ${clientId}`);\n      return Promise.resolve(this.mediaStreams[clientId][type]);\n    } else {\n      debug(`Waiting on ${type} for ${clientId}`);\n      if (!this.pendingMediaRequests.has(clientId)) {\n        this.pendingMediaRequests.set(clientId, {});\n\n        const audioPromise = new Promise((resolve, reject) => {\n          this.pendingMediaRequests.get(clientId).audio = { resolve, reject };\n        });\n        const videoPromise = new Promise((resolve, reject) => {\n          this.pendingMediaRequests.get(clientId).video = { resolve, reject };\n        });\n\n        this.pendingMediaRequests.get(clientId).audio.promise = audioPromise;\n        this.pendingMediaRequests.get(clientId).video.promise = videoPromise;\n\n        audioPromise.catch(e => console.warn(`${clientId} getMediaStream Audio Error`, e));\n        videoPromise.catch(e => console.warn(`${clientId} getMediaStream Video Error`, e));\n      }\n      return this.pendingMediaRequests.get(clientId)[type].promise;\n    }\n  }\n\n  setMediaStream(clientId, stream) {\n    // Safari doesn't like it when you use single a mixed media stream where one of the tracks is inactive, so we\n    // split the tracks into two streams.\n    const audioStream = new MediaStream();\n    try {\n    stream.getAudioTracks().forEach(track => audioStream.addTrack(track));\n\n    } catch(e) {\n      console.warn(`${clientId} setMediaStream Audio Error`, e);\n    }\n    const videoStream = new MediaStream();\n    try {\n    stream.getVideoTracks().forEach(track => videoStream.addTrack(track));\n\n    } catch (e) {\n      console.warn(`${clientId} setMediaStream Video Error`, e);\n    }\n\n    this.mediaStreams[clientId] = { audio: audioStream, video: videoStream };\n\n    // Resolve the promise for the user's media stream if it exists.\n    if (this.pendingMediaRequests.has(clientId)) {\n      this.pendingMediaRequests.get(clientId).audio.resolve(audioStream);\n      this.pendingMediaRequests.get(clientId).video.resolve(videoStream);\n    }\n  }\n\n  getLocalMediaStream() {\n    return this.localMediaStream;\n  }\n\n  async setLocalMediaStream(stream) {\n    // our job here is to make sure the connection winds up with RTP senders sending the stuff in this stream,\n    // and not the stuff that isn't in this stream. strategy is to replace existing tracks if we can, add tracks\n    // that we can't replace, and disable tracks that don't exist anymore.\n\n    // note that we don't ever remove a track from the stream -- since Janus doesn't support Unified Plan, we absolutely\n    // can't wind up with a SDP that has >1 audio or >1 video tracks, even if one of them is inactive (what you get if\n    // you remove a track from an existing stream.)\n    if (this.publisher && this.publisher.conn) {\n      const existingSenders = this.publisher.conn.getSenders();\n      const newSenders = [];\n      const tracks = stream.getTracks();\n\n      for (let i = 0; i < tracks.length; i++) {\n        const t = tracks[i];\n        const sender = existingSenders.find(s => s.track != null && s.track.kind == t.kind);\n\n        if (sender != null) {\n          if (sender.replaceTrack) {\n            await sender.replaceTrack(t);\n          } else {\n            // Fallback for browsers that don't support replaceTrack. At this time of this writing\n            // most browsers support it, and testing this code path seems to not work properly\n            // in Chrome anymore.\n            stream.removeTrack(sender.track);\n            stream.addTrack(t);\n          }\n          newSenders.push(sender);\n        } else {\n          newSenders.push(this.publisher.conn.addTrack(t, stream));\n        }\n      }\n      existingSenders.forEach(s => {\n        if (!newSenders.includes(s)) {\n          s.track.enabled = false;\n        }\n      });\n    }\n    this.localMediaStream = stream;\n    this.setMediaStream(this.clientId, stream);\n  }\n\n  enableMicrophone(enabled) {\n    if (this.publisher && this.publisher.conn) {\n      this.publisher.conn.getSenders().forEach(s => {\n        if (s.track.kind == \"audio\") {\n          s.track.enabled = enabled;\n        }\n      });\n    }\n  }\n\n  sendData(clientId, dataType, data) {\n    if (!this.publisher) {\n      console.warn(\"sendData called without a publisher\");\n    } else {\n      switch (this.unreliableTransport) {\n        case \"websocket\":\n          if (this.ws.readyState === 1) { // OPEN\n            this.publisher.handle.sendMessage({ kind: \"data\", body: JSON.stringify({ dataType, data }), whom: clientId });\n          }\n          break;\n        case \"datachannel\":\n          if (this.publisher.unreliableChannel.readyState === \"open\") {\n            this.publisher.unreliableChannel.send(JSON.stringify({ clientId, dataType, data }));\n          }\n          break;\n        default:\n          this.unreliableTransport(clientId, dataType, data);\n          break;\n      }\n    }\n  }\n\n  sendDataGuaranteed(clientId, dataType, data) {\n    if (!this.publisher) {\n      console.warn(\"sendDataGuaranteed called without a publisher\");\n    } else {\n      switch (this.reliableTransport) {\n        case \"websocket\":\n          if (this.ws.readyState === 1) { // OPEN\n            this.publisher.handle.sendMessage({ kind: \"data\", body: JSON.stringify({ dataType, data }), whom: clientId });\n          }\n          break;\n        case \"datachannel\":\n          if (this.publisher.reliableChannel.readyState === \"open\") {\n            this.publisher.reliableChannel.send(JSON.stringify({ clientId, dataType, data }));\n          }\n          break;\n        default:\n          this.reliableTransport(clientId, dataType, data);\n          break;\n      }\n    }\n  }\n\n  broadcastData(dataType, data) {\n    if (!this.publisher) {\n      console.warn(\"broadcastData called without a publisher\");\n    } else {\n      switch (this.unreliableTransport) {\n        case \"websocket\":\n          if (this.ws.readyState === 1) { // OPEN\n            this.publisher.handle.sendMessage({ kind: \"data\", body: JSON.stringify({ dataType, data }) });\n          }\n          break;\n        case \"datachannel\":\n          if (this.publisher.unreliableChannel.readyState === \"open\") {\n            this.publisher.unreliableChannel.send(JSON.stringify({ dataType, data }));\n          }\n          break;\n        default:\n          this.unreliableTransport(undefined, dataType, data);\n          break;\n      }\n    }\n  }\n\n  broadcastDataGuaranteed(dataType, data) {\n    if (!this.publisher) {\n      console.warn(\"broadcastDataGuaranteed called without a publisher\");\n    } else {\n      switch (this.reliableTransport) {\n        case \"websocket\":\n          if (this.ws.readyState === 1) { // OPEN\n            this.publisher.handle.sendMessage({ kind: \"data\", body: JSON.stringify({ dataType, data }) });\n          }\n          break;\n        case \"datachannel\":\n          if (this.publisher.reliableChannel.readyState === \"open\") {\n            this.publisher.reliableChannel.send(JSON.stringify({ dataType, data }));\n          }\n          break;\n        default:\n          this.reliableTransport(undefined, dataType, data);\n          break;\n      }\n    }\n  }\n\n  kick(clientId, permsToken) {\n    return this.publisher.handle.sendMessage({ kind: \"kick\", room_id: this.room, user_id: clientId, token: permsToken }).then(() => {\n      document.body.dispatchEvent(new CustomEvent(\"kicked\", { detail: { clientId: clientId } }));\n    });\n  }\n\n  block(clientId) {\n    return this.publisher.handle.sendMessage({ kind: \"block\", whom: clientId }).then(() => {\n      this.blockedClients.set(clientId, true);\n      document.body.dispatchEvent(new CustomEvent(\"blocked\", { detail: { clientId: clientId } }));\n    });\n  }\n\n  unblock(clientId) {\n    return this.publisher.handle.sendMessage({ kind: \"unblock\", whom: clientId }).then(() => {\n      this.blockedClients.delete(clientId);\n      document.body.dispatchEvent(new CustomEvent(\"unblocked\", { detail: { clientId: clientId } }));\n    });\n  }\n}\n\nNAF.adapters.register(\"janus\", JanusAdapter);\n\nmodule.exports = JanusAdapter;\n","/* eslint-env node */\n'use strict';\n\n// SDP helpers.\nconst SDPUtils = {};\n\n// Generate an alphanumeric identifier for cname or mids.\n// TODO: use UUIDs instead? https://gist.github.com/jed/982883\nSDPUtils.generateIdentifier = function() {\n  return Math.random().toString(36).substring(2, 12);\n};\n\n// The RTCP CNAME used by all peerconnections from the same JS.\nSDPUtils.localCName = SDPUtils.generateIdentifier();\n\n// Splits SDP into lines, dealing with both CRLF and LF.\nSDPUtils.splitLines = function(blob) {\n  return blob.trim().split('\\n').map(line => line.trim());\n};\n// Splits SDP into sessionpart and mediasections. Ensures CRLF.\nSDPUtils.splitSections = function(blob) {\n  const parts = blob.split('\\nm=');\n  return parts.map((part, index) => (index > 0 ?\n    'm=' + part : part).trim() + '\\r\\n');\n};\n\n// Returns the session description.\nSDPUtils.getDescription = function(blob) {\n  const sections = SDPUtils.splitSections(blob);\n  return sections && sections[0];\n};\n\n// Returns the individual media sections.\nSDPUtils.getMediaSections = function(blob) {\n  const sections = SDPUtils.splitSections(blob);\n  sections.shift();\n  return sections;\n};\n\n// Returns lines that start with a certain prefix.\nSDPUtils.matchPrefix = function(blob, prefix) {\n  return SDPUtils.splitLines(blob).filter(line => line.indexOf(prefix) === 0);\n};\n\n// Parses an ICE candidate line. Sample input:\n// candidate:702786350 2 udp 41819902 8.8.8.8 60769 typ relay raddr 8.8.8.8\n// rport 55996\"\n// Input can be prefixed with a=.\nSDPUtils.parseCandidate = function(line) {\n  let parts;\n  // Parse both variants.\n  if (line.indexOf('a=candidate:') === 0) {\n    parts = line.substring(12).split(' ');\n  } else {\n    parts = line.substring(10).split(' ');\n  }\n\n  const candidate = {\n    foundation: parts[0],\n    component: {1: 'rtp', 2: 'rtcp'}[parts[1]] || parts[1],\n    protocol: parts[2].toLowerCase(),\n    priority: parseInt(parts[3], 10),\n    ip: parts[4],\n    address: parts[4], // address is an alias for ip.\n    port: parseInt(parts[5], 10),\n    // skip parts[6] == 'typ'\n    type: parts[7],\n  };\n\n  for (let i = 8; i < parts.length; i += 2) {\n    switch (parts[i]) {\n      case 'raddr':\n        candidate.relatedAddress = parts[i + 1];\n        break;\n      case 'rport':\n        candidate.relatedPort = parseInt(parts[i + 1], 10);\n        break;\n      case 'tcptype':\n        candidate.tcpType = parts[i + 1];\n        break;\n      case 'ufrag':\n        candidate.ufrag = parts[i + 1]; // for backward compatibility.\n        candidate.usernameFragment = parts[i + 1];\n        break;\n      default: // extension handling, in particular ufrag. Don't overwrite.\n        if (candidate[parts[i]] === undefined) {\n          candidate[parts[i]] = parts[i + 1];\n        }\n        break;\n    }\n  }\n  return candidate;\n};\n\n// Translates a candidate object into SDP candidate attribute.\n// This does not include the a= prefix!\nSDPUtils.writeCandidate = function(candidate) {\n  const sdp = [];\n  sdp.push(candidate.foundation);\n\n  const component = candidate.component;\n  if (component === 'rtp') {\n    sdp.push(1);\n  } else if (component === 'rtcp') {\n    sdp.push(2);\n  } else {\n    sdp.push(component);\n  }\n  sdp.push(candidate.protocol.toUpperCase());\n  sdp.push(candidate.priority);\n  sdp.push(candidate.address || candidate.ip);\n  sdp.push(candidate.port);\n\n  const type = candidate.type;\n  sdp.push('typ');\n  sdp.push(type);\n  if (type !== 'host' && candidate.relatedAddress &&\n      candidate.relatedPort) {\n    sdp.push('raddr');\n    sdp.push(candidate.relatedAddress);\n    sdp.push('rport');\n    sdp.push(candidate.relatedPort);\n  }\n  if (candidate.tcpType && candidate.protocol.toLowerCase() === 'tcp') {\n    sdp.push('tcptype');\n    sdp.push(candidate.tcpType);\n  }\n  if (candidate.usernameFragment || candidate.ufrag) {\n    sdp.push('ufrag');\n    sdp.push(candidate.usernameFragment || candidate.ufrag);\n  }\n  return 'candidate:' + sdp.join(' ');\n};\n\n// Parses an ice-options line, returns an array of option tags.\n// Sample input:\n// a=ice-options:foo bar\nSDPUtils.parseIceOptions = function(line) {\n  return line.substring(14).split(' ');\n};\n\n// Parses a rtpmap line, returns RTCRtpCoddecParameters. Sample input:\n// a=rtpmap:111 opus/48000/2\nSDPUtils.parseRtpMap = function(line) {\n  let parts = line.substring(9).split(' ');\n  const parsed = {\n    payloadType: parseInt(parts.shift(), 10), // was: id\n  };\n\n  parts = parts[0].split('/');\n\n  parsed.name = parts[0];\n  parsed.clockRate = parseInt(parts[1], 10); // was: clockrate\n  parsed.channels = parts.length === 3 ? parseInt(parts[2], 10) : 1;\n  // legacy alias, got renamed back to channels in ORTC.\n  parsed.numChannels = parsed.channels;\n  return parsed;\n};\n\n// Generates a rtpmap line from RTCRtpCodecCapability or\n// RTCRtpCodecParameters.\nSDPUtils.writeRtpMap = function(codec) {\n  let pt = codec.payloadType;\n  if (codec.preferredPayloadType !== undefined) {\n    pt = codec.preferredPayloadType;\n  }\n  const channels = codec.channels || codec.numChannels || 1;\n  return 'a=rtpmap:' + pt + ' ' + codec.name + '/' + codec.clockRate +\n      (channels !== 1 ? '/' + channels : '') + '\\r\\n';\n};\n\n// Parses a extmap line (headerextension from RFC 5285). Sample input:\n// a=extmap:2 urn:ietf:params:rtp-hdrext:toffset\n// a=extmap:2/sendonly urn:ietf:params:rtp-hdrext:toffset\nSDPUtils.parseExtmap = function(line) {\n  const parts = line.substring(9).split(' ');\n  return {\n    id: parseInt(parts[0], 10),\n    direction: parts[0].indexOf('/') > 0 ? parts[0].split('/')[1] : 'sendrecv',\n    uri: parts[1],\n    attributes: parts.slice(2).join(' '),\n  };\n};\n\n// Generates an extmap line from RTCRtpHeaderExtensionParameters or\n// RTCRtpHeaderExtension.\nSDPUtils.writeExtmap = function(headerExtension) {\n  return 'a=extmap:' + (headerExtension.id || headerExtension.preferredId) +\n      (headerExtension.direction && headerExtension.direction !== 'sendrecv'\n        ? '/' + headerExtension.direction\n        : '') +\n      ' ' + headerExtension.uri +\n      (headerExtension.attributes ? ' ' + headerExtension.attributes : '') +\n      '\\r\\n';\n};\n\n// Parses a fmtp line, returns dictionary. Sample input:\n// a=fmtp:96 vbr=on;cng=on\n// Also deals with vbr=on; cng=on\nSDPUtils.parseFmtp = function(line) {\n  const parsed = {};\n  let kv;\n  const parts = line.substring(line.indexOf(' ') + 1).split(';');\n  for (let j = 0; j < parts.length; j++) {\n    kv = parts[j].trim().split('=');\n    parsed[kv[0].trim()] = kv[1];\n  }\n  return parsed;\n};\n\n// Generates a fmtp line from RTCRtpCodecCapability or RTCRtpCodecParameters.\nSDPUtils.writeFmtp = function(codec) {\n  let line = '';\n  let pt = codec.payloadType;\n  if (codec.preferredPayloadType !== undefined) {\n    pt = codec.preferredPayloadType;\n  }\n  if (codec.parameters && Object.keys(codec.parameters).length) {\n    const params = [];\n    Object.keys(codec.parameters).forEach(param => {\n      if (codec.parameters[param] !== undefined) {\n        params.push(param + '=' + codec.parameters[param]);\n      } else {\n        params.push(param);\n      }\n    });\n    line += 'a=fmtp:' + pt + ' ' + params.join(';') + '\\r\\n';\n  }\n  return line;\n};\n\n// Parses a rtcp-fb line, returns RTCPRtcpFeedback object. Sample input:\n// a=rtcp-fb:98 nack rpsi\nSDPUtils.parseRtcpFb = function(line) {\n  const parts = line.substring(line.indexOf(' ') + 1).split(' ');\n  return {\n    type: parts.shift(),\n    parameter: parts.join(' '),\n  };\n};\n\n// Generate a=rtcp-fb lines from RTCRtpCodecCapability or RTCRtpCodecParameters.\nSDPUtils.writeRtcpFb = function(codec) {\n  let lines = '';\n  let pt = codec.payloadType;\n  if (codec.preferredPayloadType !== undefined) {\n    pt = codec.preferredPayloadType;\n  }\n  if (codec.rtcpFeedback && codec.rtcpFeedback.length) {\n    // FIXME: special handling for trr-int?\n    codec.rtcpFeedback.forEach(fb => {\n      lines += 'a=rtcp-fb:' + pt + ' ' + fb.type +\n      (fb.parameter && fb.parameter.length ? ' ' + fb.parameter : '') +\n          '\\r\\n';\n    });\n  }\n  return lines;\n};\n\n// Parses a RFC 5576 ssrc media attribute. Sample input:\n// a=ssrc:3735928559 cname:something\nSDPUtils.parseSsrcMedia = function(line) {\n  const sp = line.indexOf(' ');\n  const parts = {\n    ssrc: parseInt(line.substring(7, sp), 10),\n  };\n  const colon = line.indexOf(':', sp);\n  if (colon > -1) {\n    parts.attribute = line.substring(sp + 1, colon);\n    parts.value = line.substring(colon + 1);\n  } else {\n    parts.attribute = line.substring(sp + 1);\n  }\n  return parts;\n};\n\n// Parse a ssrc-group line (see RFC 5576). Sample input:\n// a=ssrc-group:semantics 12 34\nSDPUtils.parseSsrcGroup = function(line) {\n  const parts = line.substring(13).split(' ');\n  return {\n    semantics: parts.shift(),\n    ssrcs: parts.map(ssrc => parseInt(ssrc, 10)),\n  };\n};\n\n// Extracts the MID (RFC 5888) from a media section.\n// Returns the MID or undefined if no mid line was found.\nSDPUtils.getMid = function(mediaSection) {\n  const mid = SDPUtils.matchPrefix(mediaSection, 'a=mid:')[0];\n  if (mid) {\n    return mid.substring(6);\n  }\n};\n\n// Parses a fingerprint line for DTLS-SRTP.\nSDPUtils.parseFingerprint = function(line) {\n  const parts = line.substring(14).split(' ');\n  return {\n    algorithm: parts[0].toLowerCase(), // algorithm is case-sensitive in Edge.\n    value: parts[1].toUpperCase(), // the definition is upper-case in RFC 4572.\n  };\n};\n\n// Extracts DTLS parameters from SDP media section or sessionpart.\n// FIXME: for consistency with other functions this should only\n//   get the fingerprint line as input. See also getIceParameters.\nSDPUtils.getDtlsParameters = function(mediaSection, sessionpart) {\n  const lines = SDPUtils.matchPrefix(mediaSection + sessionpart,\n    'a=fingerprint:');\n  // Note: a=setup line is ignored since we use the 'auto' role in Edge.\n  return {\n    role: 'auto',\n    fingerprints: lines.map(SDPUtils.parseFingerprint),\n  };\n};\n\n// Serializes DTLS parameters to SDP.\nSDPUtils.writeDtlsParameters = function(params, setupType) {\n  let sdp = 'a=setup:' + setupType + '\\r\\n';\n  params.fingerprints.forEach(fp => {\n    sdp += 'a=fingerprint:' + fp.algorithm + ' ' + fp.value + '\\r\\n';\n  });\n  return sdp;\n};\n\n// Parses a=crypto lines into\n//   https://rawgit.com/aboba/edgertc/master/msortc-rs4.html#dictionary-rtcsrtpsdesparameters-members\nSDPUtils.parseCryptoLine = function(line) {\n  const parts = line.substring(9).split(' ');\n  return {\n    tag: parseInt(parts[0], 10),\n    cryptoSuite: parts[1],\n    keyParams: parts[2],\n    sessionParams: parts.slice(3),\n  };\n};\n\nSDPUtils.writeCryptoLine = function(parameters) {\n  return 'a=crypto:' + parameters.tag + ' ' +\n    parameters.cryptoSuite + ' ' +\n    (typeof parameters.keyParams === 'object'\n      ? SDPUtils.writeCryptoKeyParams(parameters.keyParams)\n      : parameters.keyParams) +\n    (parameters.sessionParams ? ' ' + parameters.sessionParams.join(' ') : '') +\n    '\\r\\n';\n};\n\n// Parses the crypto key parameters into\n//   https://rawgit.com/aboba/edgertc/master/msortc-rs4.html#rtcsrtpkeyparam*\nSDPUtils.parseCryptoKeyParams = function(keyParams) {\n  if (keyParams.indexOf('inline:') !== 0) {\n    return null;\n  }\n  const parts = keyParams.substring(7).split('|');\n  return {\n    keyMethod: 'inline',\n    keySalt: parts[0],\n    lifeTime: parts[1],\n    mkiValue: parts[2] ? parts[2].split(':')[0] : undefined,\n    mkiLength: parts[2] ? parts[2].split(':')[1] : undefined,\n  };\n};\n\nSDPUtils.writeCryptoKeyParams = function(keyParams) {\n  return keyParams.keyMethod + ':'\n    + keyParams.keySalt +\n    (keyParams.lifeTime ? '|' + keyParams.lifeTime : '') +\n    (keyParams.mkiValue && keyParams.mkiLength\n      ? '|' + keyParams.mkiValue + ':' + keyParams.mkiLength\n      : '');\n};\n\n// Extracts all SDES parameters.\nSDPUtils.getCryptoParameters = function(mediaSection, sessionpart) {\n  const lines = SDPUtils.matchPrefix(mediaSection + sessionpart,\n    'a=crypto:');\n  return lines.map(SDPUtils.parseCryptoLine);\n};\n\n// Parses ICE information from SDP media section or sessionpart.\n// FIXME: for consistency with other functions this should only\n//   get the ice-ufrag and ice-pwd lines as input.\nSDPUtils.getIceParameters = function(mediaSection, sessionpart) {\n  const ufrag = SDPUtils.matchPrefix(mediaSection + sessionpart,\n    'a=ice-ufrag:')[0];\n  const pwd = SDPUtils.matchPrefix(mediaSection + sessionpart,\n    'a=ice-pwd:')[0];\n  if (!(ufrag && pwd)) {\n    return null;\n  }\n  return {\n    usernameFragment: ufrag.substring(12),\n    password: pwd.substring(10),\n  };\n};\n\n// Serializes ICE parameters to SDP.\nSDPUtils.writeIceParameters = function(params) {\n  let sdp = 'a=ice-ufrag:' + params.usernameFragment + '\\r\\n' +\n      'a=ice-pwd:' + params.password + '\\r\\n';\n  if (params.iceLite) {\n    sdp += 'a=ice-lite\\r\\n';\n  }\n  return sdp;\n};\n\n// Parses the SDP media section and returns RTCRtpParameters.\nSDPUtils.parseRtpParameters = function(mediaSection) {\n  const description = {\n    codecs: [],\n    headerExtensions: [],\n    fecMechanisms: [],\n    rtcp: [],\n  };\n  const lines = SDPUtils.splitLines(mediaSection);\n  const mline = lines[0].split(' ');\n  description.profile = mline[2];\n  for (let i = 3; i < mline.length; i++) { // find all codecs from mline[3..]\n    const pt = mline[i];\n    const rtpmapline = SDPUtils.matchPrefix(\n      mediaSection, 'a=rtpmap:' + pt + ' ')[0];\n    if (rtpmapline) {\n      const codec = SDPUtils.parseRtpMap(rtpmapline);\n      const fmtps = SDPUtils.matchPrefix(\n        mediaSection, 'a=fmtp:' + pt + ' ');\n      // Only the first a=fmtp:<pt> is considered.\n      codec.parameters = fmtps.length ? SDPUtils.parseFmtp(fmtps[0]) : {};\n      codec.rtcpFeedback = SDPUtils.matchPrefix(\n        mediaSection, 'a=rtcp-fb:' + pt + ' ')\n        .map(SDPUtils.parseRtcpFb);\n      description.codecs.push(codec);\n      // parse FEC mechanisms from rtpmap lines.\n      switch (codec.name.toUpperCase()) {\n        case 'RED':\n        case 'ULPFEC':\n          description.fecMechanisms.push(codec.name.toUpperCase());\n          break;\n        default: // only RED and ULPFEC are recognized as FEC mechanisms.\n          break;\n      }\n    }\n  }\n  SDPUtils.matchPrefix(mediaSection, 'a=extmap:').forEach(line => {\n    description.headerExtensions.push(SDPUtils.parseExtmap(line));\n  });\n  const wildcardRtcpFb = SDPUtils.matchPrefix(mediaSection, 'a=rtcp-fb:* ')\n    .map(SDPUtils.parseRtcpFb);\n  description.codecs.forEach(codec => {\n    wildcardRtcpFb.forEach(fb=> {\n      const duplicate = codec.rtcpFeedback.find(existingFeedback => {\n        return existingFeedback.type === fb.type &&\n          existingFeedback.parameter === fb.parameter;\n      });\n      if (!duplicate) {\n        codec.rtcpFeedback.push(fb);\n      }\n    });\n  });\n  // FIXME: parse rtcp.\n  return description;\n};\n\n// Generates parts of the SDP media section describing the capabilities /\n// parameters.\nSDPUtils.writeRtpDescription = function(kind, caps) {\n  let sdp = '';\n\n  // Build the mline.\n  sdp += 'm=' + kind + ' ';\n  sdp += caps.codecs.length > 0 ? '9' : '0'; // reject if no codecs.\n  sdp += ' ' + (caps.profile || 'UDP/TLS/RTP/SAVPF') + ' ';\n  sdp += caps.codecs.map(codec => {\n    if (codec.preferredPayloadType !== undefined) {\n      return codec.preferredPayloadType;\n    }\n    return codec.payloadType;\n  }).join(' ') + '\\r\\n';\n\n  sdp += 'c=IN IP4 0.0.0.0\\r\\n';\n  sdp += 'a=rtcp:9 IN IP4 0.0.0.0\\r\\n';\n\n  // Add a=rtpmap lines for each codec. Also fmtp and rtcp-fb.\n  caps.codecs.forEach(codec => {\n    sdp += SDPUtils.writeRtpMap(codec);\n    sdp += SDPUtils.writeFmtp(codec);\n    sdp += SDPUtils.writeRtcpFb(codec);\n  });\n  let maxptime = 0;\n  caps.codecs.forEach(codec => {\n    if (codec.maxptime > maxptime) {\n      maxptime = codec.maxptime;\n    }\n  });\n  if (maxptime > 0) {\n    sdp += 'a=maxptime:' + maxptime + '\\r\\n';\n  }\n\n  if (caps.headerExtensions) {\n    caps.headerExtensions.forEach(extension => {\n      sdp += SDPUtils.writeExtmap(extension);\n    });\n  }\n  // FIXME: write fecMechanisms.\n  return sdp;\n};\n\n// Parses the SDP media section and returns an array of\n// RTCRtpEncodingParameters.\nSDPUtils.parseRtpEncodingParameters = function(mediaSection) {\n  const encodingParameters = [];\n  const description = SDPUtils.parseRtpParameters(mediaSection);\n  const hasRed = description.fecMechanisms.indexOf('RED') !== -1;\n  const hasUlpfec = description.fecMechanisms.indexOf('ULPFEC') !== -1;\n\n  // filter a=ssrc:... cname:, ignore PlanB-msid\n  const ssrcs = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')\n    .map(line => SDPUtils.parseSsrcMedia(line))\n    .filter(parts => parts.attribute === 'cname');\n  const primarySsrc = ssrcs.length > 0 && ssrcs[0].ssrc;\n  let secondarySsrc;\n\n  const flows = SDPUtils.matchPrefix(mediaSection, 'a=ssrc-group:FID')\n    .map(line => {\n      const parts = line.substring(17).split(' ');\n      return parts.map(part => parseInt(part, 10));\n    });\n  if (flows.length > 0 && flows[0].length > 1 && flows[0][0] === primarySsrc) {\n    secondarySsrc = flows[0][1];\n  }\n\n  description.codecs.forEach(codec => {\n    if (codec.name.toUpperCase() === 'RTX' && codec.parameters.apt) {\n      let encParam = {\n        ssrc: primarySsrc,\n        codecPayloadType: parseInt(codec.parameters.apt, 10),\n      };\n      if (primarySsrc && secondarySsrc) {\n        encParam.rtx = {ssrc: secondarySsrc};\n      }\n      encodingParameters.push(encParam);\n      if (hasRed) {\n        encParam = JSON.parse(JSON.stringify(encParam));\n        encParam.fec = {\n          ssrc: primarySsrc,\n          mechanism: hasUlpfec ? 'red+ulpfec' : 'red',\n        };\n        encodingParameters.push(encParam);\n      }\n    }\n  });\n  if (encodingParameters.length === 0 && primarySsrc) {\n    encodingParameters.push({\n      ssrc: primarySsrc,\n    });\n  }\n\n  // we support both b=AS and b=TIAS but interpret AS as TIAS.\n  let bandwidth = SDPUtils.matchPrefix(mediaSection, 'b=');\n  if (bandwidth.length) {\n    if (bandwidth[0].indexOf('b=TIAS:') === 0) {\n      bandwidth = parseInt(bandwidth[0].substring(7), 10);\n    } else if (bandwidth[0].indexOf('b=AS:') === 0) {\n      // use formula from JSEP to convert b=AS to TIAS value.\n      bandwidth = parseInt(bandwidth[0].substring(5), 10) * 1000 * 0.95\n          - (50 * 40 * 8);\n    } else {\n      bandwidth = undefined;\n    }\n    encodingParameters.forEach(params => {\n      params.maxBitrate = bandwidth;\n    });\n  }\n  return encodingParameters;\n};\n\n// parses http://draft.ortc.org/#rtcrtcpparameters*\nSDPUtils.parseRtcpParameters = function(mediaSection) {\n  const rtcpParameters = {};\n\n  // Gets the first SSRC. Note that with RTX there might be multiple\n  // SSRCs.\n  const remoteSsrc = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')\n    .map(line => SDPUtils.parseSsrcMedia(line))\n    .filter(obj => obj.attribute === 'cname')[0];\n  if (remoteSsrc) {\n    rtcpParameters.cname = remoteSsrc.value;\n    rtcpParameters.ssrc = remoteSsrc.ssrc;\n  }\n\n  // Edge uses the compound attribute instead of reducedSize\n  // compound is !reducedSize\n  const rsize = SDPUtils.matchPrefix(mediaSection, 'a=rtcp-rsize');\n  rtcpParameters.reducedSize = rsize.length > 0;\n  rtcpParameters.compound = rsize.length === 0;\n\n  // parses the rtcp-mux attrіbute.\n  // Note that Edge does not support unmuxed RTCP.\n  const mux = SDPUtils.matchPrefix(mediaSection, 'a=rtcp-mux');\n  rtcpParameters.mux = mux.length > 0;\n\n  return rtcpParameters;\n};\n\nSDPUtils.writeRtcpParameters = function(rtcpParameters) {\n  let sdp = '';\n  if (rtcpParameters.reducedSize) {\n    sdp += 'a=rtcp-rsize\\r\\n';\n  }\n  if (rtcpParameters.mux) {\n    sdp += 'a=rtcp-mux\\r\\n';\n  }\n  if (rtcpParameters.ssrc !== undefined && rtcpParameters.cname) {\n    sdp += 'a=ssrc:' + rtcpParameters.ssrc +\n      ' cname:' + rtcpParameters.cname + '\\r\\n';\n  }\n  return sdp;\n};\n\n\n// parses either a=msid: or a=ssrc:... msid lines and returns\n// the id of the MediaStream and MediaStreamTrack.\nSDPUtils.parseMsid = function(mediaSection) {\n  let parts;\n  const spec = SDPUtils.matchPrefix(mediaSection, 'a=msid:');\n  if (spec.length === 1) {\n    parts = spec[0].substring(7).split(' ');\n    return {stream: parts[0], track: parts[1]};\n  }\n  const planB = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')\n    .map(line => SDPUtils.parseSsrcMedia(line))\n    .filter(msidParts => msidParts.attribute === 'msid');\n  if (planB.length > 0) {\n    parts = planB[0].value.split(' ');\n    return {stream: parts[0], track: parts[1]};\n  }\n};\n\n// SCTP\n// parses draft-ietf-mmusic-sctp-sdp-26 first and falls back\n// to draft-ietf-mmusic-sctp-sdp-05\nSDPUtils.parseSctpDescription = function(mediaSection) {\n  const mline = SDPUtils.parseMLine(mediaSection);\n  const maxSizeLine = SDPUtils.matchPrefix(mediaSection, 'a=max-message-size:');\n  let maxMessageSize;\n  if (maxSizeLine.length > 0) {\n    maxMessageSize = parseInt(maxSizeLine[0].substring(19), 10);\n  }\n  if (isNaN(maxMessageSize)) {\n    maxMessageSize = 65536;\n  }\n  const sctpPort = SDPUtils.matchPrefix(mediaSection, 'a=sctp-port:');\n  if (sctpPort.length > 0) {\n    return {\n      port: parseInt(sctpPort[0].substring(12), 10),\n      protocol: mline.fmt,\n      maxMessageSize,\n    };\n  }\n  const sctpMapLines = SDPUtils.matchPrefix(mediaSection, 'a=sctpmap:');\n  if (sctpMapLines.length > 0) {\n    const parts = sctpMapLines[0]\n      .substring(10)\n      .split(' ');\n    return {\n      port: parseInt(parts[0], 10),\n      protocol: parts[1],\n      maxMessageSize,\n    };\n  }\n};\n\n// SCTP\n// outputs the draft-ietf-mmusic-sctp-sdp-26 version that all browsers\n// support by now receiving in this format, unless we originally parsed\n// as the draft-ietf-mmusic-sctp-sdp-05 format (indicated by the m-line\n// protocol of DTLS/SCTP -- without UDP/ or TCP/)\nSDPUtils.writeSctpDescription = function(media, sctp) {\n  let output = [];\n  if (media.protocol !== 'DTLS/SCTP') {\n    output = [\n      'm=' + media.kind + ' 9 ' + media.protocol + ' ' + sctp.protocol + '\\r\\n',\n      'c=IN IP4 0.0.0.0\\r\\n',\n      'a=sctp-port:' + sctp.port + '\\r\\n',\n    ];\n  } else {\n    output = [\n      'm=' + media.kind + ' 9 ' + media.protocol + ' ' + sctp.port + '\\r\\n',\n      'c=IN IP4 0.0.0.0\\r\\n',\n      'a=sctpmap:' + sctp.port + ' ' + sctp.protocol + ' 65535\\r\\n',\n    ];\n  }\n  if (sctp.maxMessageSize !== undefined) {\n    output.push('a=max-message-size:' + sctp.maxMessageSize + '\\r\\n');\n  }\n  return output.join('');\n};\n\n// Generate a session ID for SDP.\n// https://tools.ietf.org/html/draft-ietf-rtcweb-jsep-20#section-5.2.1\n// recommends using a cryptographically random +ve 64-bit value\n// but right now this should be acceptable and within the right range\nSDPUtils.generateSessionId = function() {\n  return Math.random().toString().substr(2, 22);\n};\n\n// Write boiler plate for start of SDP\n// sessId argument is optional - if not supplied it will\n// be generated randomly\n// sessVersion is optional and defaults to 2\n// sessUser is optional and defaults to 'thisisadapterortc'\nSDPUtils.writeSessionBoilerplate = function(sessId, sessVer, sessUser) {\n  let sessionId;\n  const version = sessVer !== undefined ? sessVer : 2;\n  if (sessId) {\n    sessionId = sessId;\n  } else {\n    sessionId = SDPUtils.generateSessionId();\n  }\n  const user = sessUser || 'thisisadapterortc';\n  // FIXME: sess-id should be an NTP timestamp.\n  return 'v=0\\r\\n' +\n      'o=' + user + ' ' + sessionId + ' ' + version +\n        ' IN IP4 127.0.0.1\\r\\n' +\n      's=-\\r\\n' +\n      't=0 0\\r\\n';\n};\n\n// Gets the direction from the mediaSection or the sessionpart.\nSDPUtils.getDirection = function(mediaSection, sessionpart) {\n  // Look for sendrecv, sendonly, recvonly, inactive, default to sendrecv.\n  const lines = SDPUtils.splitLines(mediaSection);\n  for (let i = 0; i < lines.length; i++) {\n    switch (lines[i]) {\n      case 'a=sendrecv':\n      case 'a=sendonly':\n      case 'a=recvonly':\n      case 'a=inactive':\n        return lines[i].substring(2);\n      default:\n        // FIXME: What should happen here?\n    }\n  }\n  if (sessionpart) {\n    return SDPUtils.getDirection(sessionpart);\n  }\n  return 'sendrecv';\n};\n\nSDPUtils.getKind = function(mediaSection) {\n  const lines = SDPUtils.splitLines(mediaSection);\n  const mline = lines[0].split(' ');\n  return mline[0].substring(2);\n};\n\nSDPUtils.isRejected = function(mediaSection) {\n  return mediaSection.split(' ', 2)[1] === '0';\n};\n\nSDPUtils.parseMLine = function(mediaSection) {\n  const lines = SDPUtils.splitLines(mediaSection);\n  const parts = lines[0].substring(2).split(' ');\n  return {\n    kind: parts[0],\n    port: parseInt(parts[1], 10),\n    protocol: parts[2],\n    fmt: parts.slice(3).join(' '),\n  };\n};\n\nSDPUtils.parseOLine = function(mediaSection) {\n  const line = SDPUtils.matchPrefix(mediaSection, 'o=')[0];\n  const parts = line.substring(2).split(' ');\n  return {\n    username: parts[0],\n    sessionId: parts[1],\n    sessionVersion: parseInt(parts[2], 10),\n    netType: parts[3],\n    addressType: parts[4],\n    address: parts[5],\n  };\n};\n\n// a very naive interpretation of a valid SDP.\nSDPUtils.isValidSDP = function(blob) {\n  if (typeof blob !== 'string' || blob.length === 0) {\n    return false;\n  }\n  const lines = SDPUtils.splitLines(blob);\n  for (let i = 0; i < lines.length; i++) {\n    if (lines[i].length < 2 || lines[i].charAt(1) !== '=') {\n      return false;\n    }\n    // TODO: check the modifier a bit more.\n  }\n  return true;\n};\n\n// Expose public methods.\nif (typeof module === 'object') {\n  module.exports = SDPUtils;\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(497);\n"],"names":["JanusPluginHandle","session","this","id","undefined","JanusSession","output","options","nextTxId","txns","eventHandlers","Object","assign","verbose","timeoutMs","keepaliveMs","prototype","attach","plugin","loop_index","payload","send","then","resp","data","detach","on","ev","callback","signal","sender","type","handle_id","sendMessage","body","sendJsep","jsep","sendTrickle","candidate","create","destroy","dispose","txId","_killKeepalive","hasOwnProperty","txn","clearTimeout","timeout","reject","Error","isError","janus","handlers","push","receive","_logIncoming","session_id","console","warn","responseType","i","length","transaction","resolve","toString","Promise","setTimeout","_transmit","_logOutgoing","JSON","stringify","_resetKeepalive","kind","message","debug","_sendKeepalive","keepaliveTimeout","catch","e","error","module","exports","mj","require","sendOriginal","indexOf","NAF","connection","adapter","reconnect","sdpUtils","log","isSafari","test","navigator","userAgent","debounce","fn","curr","args","Array","slice","call","arguments","_","apply","untilDataChannelOpen","dataChannel","readyState","resolver","rejector","clear","removeEventListener","addEventListener","isH264VideoSupported","document","createElement","canPlayType","OPUS_PARAMETERS","usedtx","stereo","DEFAULT_PEER_CONNECTION_CONFIG","iceServers","urls","JanusAdapter","constructor","room","clientId","joinToken","serverUrl","webRtcOptions","peerConnectionConfig","ws","reliableTransport","unreliableTransport","initialReconnectionDelay","Math","random","reconnectionDelay","reconnectionTimeout","maxReconnectionAttempts","reconnectionAttempts","publisher","occupants","leftOccupants","Set","mediaStreams","localMediaStream","pendingMediaRequests","Map","blockedClients","frozenUpdates","timeOffsets","serverTimeRequests","avgTimeOffset","onWebsocketOpen","bind","onWebsocketClose","onWebsocketMessage","onDataChannelMessage","onData","setServerUrl","url","setApp","app","setRoom","roomName","setJoinToken","setClientId","setWebRtcOptions","setPeerConnectionConfig","setServerConnectListeners","successListener","failureListener","connectSuccess","connectFailure","setRoomOccupantListener","occupantListener","onOccupantsChanged","setDataChannelListeners","openListener","closedListener","messageListener","onOccupantConnected","onOccupantDisconnected","onOccupantMessage","setReconnectionListeners","reconnectingListener","reconnectedListener","reconnectionErrorListener","onReconnecting","onReconnected","onReconnectionError","setEventLoops","loops","connect","websocketConnection","WebSocket","wsOnOpen","all","updateTimeOffset","disconnect","removeAllOccupants","conn","close","delayedReconnectTimeout","isDisconnected","createPublisher","addOccupantPromises","initialOccupants","occupantId","addOccupant","event","code","performDelayedReconnect","parse","removeOccupant","delete","subscriber","createSubscriber","setMediaStream","mediaStream","getOwnPropertyNames","add","has","msg","get","audio","video","associate","handle","iceConnectionState","offer","createOffer","configurePublisherSdp","fixSafariIceUFrag","local","o","setLocalDescription","remote","j","r","setRemoteDescription","answer","configureSubscriberSdp","createAnswer","a","RTCPeerConnection","parseInt","webrtcup","reliableChannel","createDataChannel","ordered","unreliableChannel","maxRetransmits","getTracks","forEach","track","addTrack","plugindata","room_id","user_id","dispatchEvent","CustomEvent","detail","by","sendJoin","notifications","success","err","response","users","includes","sdp","replace","line","pt","parameters","parseFmtp","writeFmtp","payloadType","maxRetries","webrtcFailed","leftInterval","setInterval","clearInterval","media","_iOSHackDelayedInitialPeer","MediaStream","getReceivers","receiver","subscribe","token","toggleFreeze","frozen","unfreeze","freeze","flushPendingUpdates","dataForUpdateMultiMessage","networkId","l","d","getPendingData","dataType","owner","getPendingDataForNetworkId","source","storeMessage","storeSingleMessage","index","storedMessage","storedData","isOutdatedMessage","lastOwnerTime","isContemporaneousMessage","isFirstSync","set","components","enabled","shouldStartConnectionTo","client","startStreamConnection","closeStreamConnection","getConnectStatus","adapters","IS_CONNECTED","NOT_CONNECTED","clientSentTime","Date","now","res","fetch","location","href","method","cache","serverReceivedTime","headers","getTime","precision","clientReceivedTime","timeOffset","reduce","acc","offset","getServerTime","getMediaStream","audioPromise","videoPromise","promise","stream","audioStream","getAudioTracks","videoStream","getVideoTracks","getLocalMediaStream","setLocalMediaStream","existingSenders","getSenders","newSenders","tracks","t","find","s","replaceTrack","removeTrack","enableMicrophone","sendData","whom","sendDataGuaranteed","broadcastData","broadcastDataGuaranteed","kick","permsToken","block","unblock","register","SDPUtils","substring","localCName","generateIdentifier","splitLines","blob","trim","split","map","splitSections","part","getDescription","sections","getMediaSections","shift","matchPrefix","prefix","filter","parseCandidate","parts","foundation","component","protocol","toLowerCase","priority","ip","address","port","relatedAddress","relatedPort","tcpType","ufrag","usernameFragment","writeCandidate","toUpperCase","join","parseIceOptions","parseRtpMap","parsed","name","clockRate","channels","numChannels","writeRtpMap","codec","preferredPayloadType","parseExtmap","direction","uri","attributes","writeExtmap","headerExtension","preferredId","kv","keys","params","param","parseRtcpFb","parameter","writeRtcpFb","lines","rtcpFeedback","fb","parseSsrcMedia","sp","ssrc","colon","attribute","value","parseSsrcGroup","semantics","ssrcs","getMid","mediaSection","mid","parseFingerprint","algorithm","getDtlsParameters","sessionpart","role","fingerprints","writeDtlsParameters","setupType","fp","parseCryptoLine","tag","cryptoSuite","keyParams","sessionParams","writeCryptoLine","writeCryptoKeyParams","parseCryptoKeyParams","keyMethod","keySalt","lifeTime","mkiValue","mkiLength","getCryptoParameters","getIceParameters","pwd","password","writeIceParameters","iceLite","parseRtpParameters","description","codecs","headerExtensions","fecMechanisms","rtcp","mline","profile","rtpmapline","fmtps","wildcardRtcpFb","existingFeedback","writeRtpDescription","caps","maxptime","extension","parseRtpEncodingParameters","encodingParameters","hasRed","hasUlpfec","primarySsrc","secondarySsrc","flows","apt","encParam","codecPayloadType","rtx","fec","mechanism","bandwidth","maxBitrate","parseRtcpParameters","rtcpParameters","remoteSsrc","obj","cname","rsize","reducedSize","compound","mux","writeRtcpParameters","parseMsid","spec","planB","msidParts","parseSctpDescription","parseMLine","maxSizeLine","maxMessageSize","isNaN","sctpPort","fmt","sctpMapLines","writeSctpDescription","sctp","generateSessionId","substr","writeSessionBoilerplate","sessId","sessVer","sessUser","sessionId","version","getDirection","getKind","isRejected","parseOLine","username","sessionVersion","netType","addressType","isValidSDP","charAt","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__"],"sourceRoot":""}